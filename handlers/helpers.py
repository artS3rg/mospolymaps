# –ö–æ–¥ –¥–ª—è –ø–æ–º–æ—â–Ω–∏–∫–∞

import aiogram as a
import keyboards as k
from main import dp, BotDB
from aiogram import types
from aiogram.dispatcher.filters import Text
from difflib import SequenceMatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from pars_html_bs4 import pars_schedule


class Search(StatesGroup):
    text = State()

class Schedule(StatesGroup):
    step1 = State()

def similar(a_word, b_word):
    return SequenceMatcher(None, a_word, b_word).ratio()


@dp.message_handler(lambda message: message.text == "üí¨ –ü–æ–º–æ—â–Ω–∏–∫", state=None)
async def send(mess: a.types.Message):
    await mess.bot.delete_message(mess.from_user.id, mess.message_id)
    status = BotDB.cursor.execute("SELECT status FROM users WHERE user_id = ?", (int(mess.from_user.id),)).fetchone()[0]
    if status == 'ban':
        await mess.bot.send_message(mess.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")
    else:
        await mess.bot.send_message(mess.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                    reply_markup=k.helper_main_sections_keyboard)


@dp.message_handler(lambda message: message.text == "üìñ –†–∞–∑–¥–µ–ª—ã", state=None)
async def send(mess: a.types.Message):
    await mess.bot.delete_message(mess.from_user.id, mess.message_id)
    await mess.bot.send_message(mess.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª', reply_markup=k.informational_sections_keyboard)



# –†–∞–∑–¥–µ–ª—ã –∏ –≤–æ–ø—Ä–æ—Å—ã
@dp.message_handler(lambda message: message.text in BotDB.get_sections(), state=None)
async def send(mess: a.types.Message):
    await mess.bot.delete_message(mess.from_user.id, mess.message_id)
    inline_questions = types.InlineKeyboardMarkup()
    answers = BotDB.get_answers(mess.text)
    for ans in answers:
        inline_questions.add(types.InlineKeyboardButton(text=ans[1], callback_data="answer_" + str(ans[0])))
    await mess.bot.send_message(mess.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:", reply_markup=inline_questions)


# –û—Ç–≤–µ—Ç
@dp.callback_query_handler(Text(startswith='answer_'))
async def send_answer(callback_query: types.CallbackQuery):
    answer_id = int(callback_query.data.split('_')[1])
    answer_text = BotDB.cursor.execute("SELECT text FROM information WHERE id = ?", (answer_id,)).fetchone()[0]

    if BotDB.cursor.execute("SELECT links FROM information WHERE id = ?", (answer_id,)).fetchone()[0] is not None:
        answer_text += "\n\n" + BotDB.cursor.execute("SELECT links FROM information WHERE id = ?", (answer_id,)).fetchone()[0]

    album = types.MediaGroup()

    try:
        images_id = BotDB.cursor.execute("SELECT image_id FROM information WHERE id = ?", (answer_id,)).fetchone()[
            0].split(';')
        for i in range(len(images_id)):
            if i == (len(images_id) - 1):
                album.attach_photo(photo=images_id[i], caption=answer_text)
            else:
                album.attach_photo(photo=images_id[i])
        await callback_query.bot.send_media_group(chat_id=callback_query.from_user.id, media=album)

        # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if BotDB.cursor.execute("SELECT buttons FROM information WHERE id = ?", (answer_id,)).fetchone()[0] is not None:

            buttons_id = list(map(int, BotDB.cursor.execute("SELECT buttons FROM information WHERE id = ?", (answer_id,)).fetchone()[0].split(';')))

            buttons_names = []
            for id in buttons_id:
                buttons_names.append(BotDB.cursor.execute("SELECT text FROM information WHERE id = ?", (id,)).fetchone()[0])

            inline_questions = types.InlineKeyboardMarkup()
            for i in range(len(buttons_id)):
                inline_questions.add(
                    types.InlineKeyboardButton(text=buttons_names[i], callback_data="answer_" + str(buttons_id[i])))

            await callback_query.bot.send_message(callback_query.from_user.id, "–°–≤—è–∑–∞–Ω–Ω–æ–µ:", reply_markup=inline_questions)

    except Exception:
        await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç")

    await callback_query.answer()


# –ü–æ–∏—Å–∫
@dp.message_handler(lambda message: message.text == "üîé –ü–æ–∏—Å–∫", state=None)
async def send(mess: a.types.Message):
    await mess.bot.delete_message(mess.from_user.id, mess.message_id)
    await mess.bot.send_message(mess.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=k.search_back_keyboard)
    await Search.text.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
@dp.message_handler(state=Search.text)
async def search(mess: types.Message, state: FSMContext):
    if mess.text == "‚Ü© –í—ã–π—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞":
        await mess.bot.send_message(mess.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=k.helper_main_sections_keyboard)
        await state.finish()
    else:
        tags = BotDB.cursor.execute("SELECT id, tags, text FROM information").fetchall()
        new_tags = []
        keyboard = types.InlineKeyboardMarkup(row_width=3)
        text = mess.text
        text = text.lower()
        text = text.replace("?", "", 1)
        text = text.replace("–∫–∞–∫ ", "", 1)
        user_words = text.split(' ')
        kolvo = 0
        for i in range(len(tags)):
            new_tags.append([tags[i][0], tags[i][1], tags[i][2]])
        for i in range(len(new_tags)):
            new_tags[i][1] = new_tags[i][1].split(';')
        for i in new_tags:
            if len(keyboard["inline_keyboard"]) == 3:
                break
            for u_word in user_words:
                for j in i[1]:
                    if similar(j, u_word) >= 0.7:  # –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —Å–ª–æ–≤–∞ –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å —Å—Ö–æ–∂–∏–º–∏
                        kolvo += 1
                        continue
            if kolvo >= 3:  # –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –∫–Ω–æ–ø–∫–∞ –¥–æ–± –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard.add(types.InlineKeyboardButton(text=i[2], callback_data="answer_" + str(i[0])))
            kolvo = 0
        if len(keyboard["inline_keyboard"]) == 0:
            await mess.bot.send_message(mess.from_user.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏ :(')
            await state.finish()
            await mess.bot.send_message(mess.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞',reply_markup=k.search_back_keyboard)
            await Search.text.set()
        else:
            await mess.bot.send_message(mess.from_user.id, '–í—Å–µ —á—Ç–æ —è —Å–º–æ–≥ –Ω–∞–π—Ç–∏:', reply_markup=keyboard)
            await state.finish()

@dp.message_handler(lambda message: message.text == "üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", state=None)
async def schedule(mess: a.types.Message):
    await mess.bot.delete_message(mess.from_user.id, mess.message_id)
    await mess.bot.send_message(mess.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã', reply_markup=k.search_back_keyboard)
    await Schedule.step1.set()

@dp.message_handler(state=Schedule.step1)
async def get_schedule(mess: a.types.Message, state=FSMContext):
    item = mess.text
    await mess.bot.send_message(mess.from_user.id, pars_schedule(item), reply_markup=k.helper_main_sections_keyboard)
    await state.finish()

@dp.message_handler(lambda message: message.text == "‚Ü© –ù–∞–∑–∞–¥")
async def send(mess: a.types.Message):
    await mess.bot.delete_message(mess.from_user.id, mess.message_id)
    await mess.bot.send_message(mess.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=k.helper_main_sections_keyboard)

@dp.message_handler(lambda message: message.text == "‚Ü© –í—ã–π—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞")
async def send(mess: a.types.Message):
    await mess.bot.delete_message(mess.from_user.id, mess.message_id)
    await mess.bot.send_message(mess.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=k.helper_main_sections_keyboard)

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def send_photo_file_id(mess: a.types.Message):
    await mess.reply(mess.photo[-1].file_id)
