import config as cfg
from aiogram import types
from main import dp, BotDB
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
import keyboards as k


class NewIdea(StatesGroup):
    text = State()


@dp.message_handler(lambda message: message.text == "üÜï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é", state=None)
async def new_idea(mess: types.Message) -> None:
    await mess.bot.delete_message(mess.from_user.id, mess.message_id)
    status = BotDB.cursor.execute("SELECT status FROM users WHERE user_id = ?", (int(mess.from_user.id),)).fetchone()[0]
    if status == 'ban':
        await mess.bot.send_message(mess.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")
    else:
        ideas = BotDB.cursor.execute("SELECT * FROM `ideas` WHERE `user_id` = ? AND `status` = ?",
                                     (mess.from_user.id, 'wait')).fetchall()
        if len(ideas) == 0:
            await mess.bot.send_message(mess.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –ù–∞—à–µ–≥–æ –±–æ—Ç–∞', reply_markup=k.idea_back_keyboard)
            await NewIdea.text.set()
        else:
            await mess.bot.send_message(mess.from_user.id, "–í–∞—à—É –ø—Ä–æ—à–ª—É—é –∏–¥–µ—é –µ—â—ë –Ω–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏!")


@dp.message_handler(state=NewIdea.text)
async def new_idea_text(mess: types.Message, state: FSMContext) -> None:
    if mess.text == "‚Ü© –ù–∞–∑–∞–¥":
        await mess.bot.send_message(mess.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=k.start_keyboard)
    else:
        buttons = [
            types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"new_idea_yes_{mess.from_user.id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"new_idea_no_{mess.from_user.id}"),
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)
        BotDB.add_idea(mess.from_user.id, mess.from_user.full_name, mess.text)
        await mess.bot.send_message(mess.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –∏–¥–µ—é!\n–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–∫–æ—Ä–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', reply_markup=k.start_keyboard)
        for i in cfg.admin_ids:
            await mess.bot.send_message(i, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mess.from_user.full_name} –ø—Ä–µ–¥–ª–æ–∂–∏–ª –Ω–æ–≤—É—é –∏–¥–µ—é!\n{mess.text}',
                                        reply_markup=keyboard)
    await state.finish()


@dp.callback_query_handler(lambda call: call.data.startswith('new_idea_yes_'))
async def new_idea_yes(call: types.CallbackQuery) -> None:
    id = call.data[13:]
    status = BotDB.cursor.execute("SELECT * FROM `ideas` WHERE `user_id` = ? AND `status` = ?", (id, 'wait')).fetchall()
    if len(status) == 0:
        await call.bot.send_message(call.from_user.id, "–ò–¥–µ—è —É–∂–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞")
    else:
        BotDB.cursor.execute("UPDATE `ideas` SET `status` = ? WHERE `user_id` = ? AND `status` = ?", ('yes', id, 'wait'))
        BotDB.conn.commit()
        await call.bot.edit_message_reply_markup(chat_id=call.from_user.id, message_id=call.message.message_id,
                                                 reply_markup=None)
        await call.message.edit_text(f'{call.message.text}\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ')
        await call.bot.send_message(id, '–í–∞—à—É –∏–¥–µ—é –æ–¥–æ–±—Ä–∏–ª–∏!')


@dp.callback_query_handler(lambda call: call.data.startswith('new_idea_no_'))
async def new_idea_no(call: types.CallbackQuery) -> None:
    id = call.data[12:]
    status = BotDB.cursor.execute("SELECT * FROM `ideas` WHERE `user_id` = ? AND `status` = ?", (id, 'wait')).fetchall()
    if len(status) == 0:
        await call.bot.send_message(call.from_user.id, "–ò–¥–µ—è —É–∂–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞")
    else:
        BotDB.cursor.execute("UPDATE `ideas` SET `status` = ? WHERE `user_id` = ? AND `status` = ?", ('no', id, 'wait'))
        BotDB.conn.commit()
        await call.bot.edit_message_reply_markup(chat_id=call.from_user.id, message_id=call.message.message_id,
                                                 reply_markup=None)
        await call.message.edit_text(f'{call.message.text}\n‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ')
        await call.bot.send_message(id, '–í–∞—à—É –∏–¥–µ—é –æ—Ç–∫–ª–æ–Ω–∏–ª–∏!')
