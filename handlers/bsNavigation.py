from aiogram import types

import keyboards
from main import dp, BotDB
from keyboards import bsCampus_keyboard
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from datetime import datetime


class BsNavigation(StatesGroup):
    bs_point_b_input = State()
    bs_point_b_audit = State()

def navigate(text, forward, min_left, max_left, min_right, max_right, none) -> str:
    def_travel = ''
    if text == forward:
        def_travel += '2. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ ‚¨ÜÔ∏è\n'
    elif text == none:
        def_travel = ''
    else:
        if () or ():
            def_travel += '2. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–æ ‚û°Ô∏è\n'
        elif (text >= min_left) or (text <= max_left):
            def_travel += '2. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ª–µ–≤–æ ‚¨ÖÔ∏è\n'
        else:
            def_travel = 'error'
    return def_travel

@dp.message_handler(lambda message: message.text == "–ë–æ–ª—å—à–∞—è –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è (–ë–°)", state=None)
async def bs_selected(mess: types.Message):
    await mess.bot.send_message(mess.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=bsCampus_keyboard)
    await mess.bot.delete_message(mess.from_user.id, mess.message_id)


@dp.message_handler(lambda message: message.text == "üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ë–°)", state=None)
async def bs_info(mess: types.Message):
    bs_info_text = 'üî∏<b>–ê–¥—Ä–µ—Å –∫–∞–º–ø—É—Å–∞ –Ω–∞ –ë–æ–ª—å—à–æ–π –°–µ–º—ë–Ω–æ–≤—Å–∫–æ–π:</b>\n' \
                   '—É—á–µ–±–Ω—ã–µ –∫–æ—Ä–ø—É—Å–∞ ¬´–ê¬ª, ¬´–ë¬ª, ¬´–í¬ª, ¬´–ù¬ª, ¬´–ù–î¬ª\n' \
                   '—Å—Ç. –º. ¬´–≠–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∞—è¬ª –∏–ª–∏ –∂/–¥ —Å—Ç–∞–Ω—Ü–∏—è –≠–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∞—è, —É–ª. –ë. –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è, –¥. 38.'
    await mess.bot.delete_message(mess.from_user.id, mess.message_id)
    await mess.bot.send_message(mess.from_user.id, bs_info_text)


@dp.message_handler(lambda message: message.text == "üîª –ú–∞—Ä—à—Ä—É—Ç (–ë–°)", state=None)
async def bs_navigation(mess: types.Message):
    await mess.bot.delete_message(mess.from_user.id, mess.message_id)
    buttons = [
        types.InlineKeyboardButton(text="–í—Ö–æ–¥", callback_data="bs_input"),
        # types.InlineKeyboardButton(text="–ê—É–¥–∏—Ç–æ—Ä–∏—è", callback_data="bs_audit"),
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await mess.bot.send_message(mess.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞', reply_markup=keyboard)


@dp.callback_query_handler(text='bs_input', state=None)
async def bs_nav_input(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="üíä –ú–µ–¥–ø—É–Ω–∫—Ç", callback_data="input_med"),
        types.InlineKeyboardButton(text="‚öΩÔ∏è –°–ø–æ—Ä—Ç–∑–∞–ª", callback_data="input_sport"),
        types.InlineKeyboardButton(text="üëï –ú –¢—É–∞–ª–µ—Ç", callback_data="input_m_wc"),
        types.InlineKeyboardButton(text="üëö –ñ –¢—É–∞–ª–µ—Ç", callback_data="input_zh_wc"),
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.delete()
    await call.bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –í–∞–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –Ω–∏–∂–µ ‚¨áÔ∏è', reply_markup=keyboard)
    await BsNavigation.bs_point_b_input.set()

@dp.callback_query_handler(text='input_med', state=BsNavigation.bs_point_b_input)
async def input_med(call: types.CallbackQuery, state:FSMContext):
    travel = "1. –ü—Ä–æ–π–¥–∏—Ç–µ –Ω–∞–ª–µ–≤–æ –∫ –ª–µ—Å—Ç–Ω–∏—Ü–µ –∏ –ø–æ–¥–Ω–∏–º–∏—Ç–µ—Å—å –Ω–∞ 1 —ç—Ç–∞–∂ ‚§¥Ô∏è\n" \
             "2. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ª–µ–≤–æ ‚¨ÖÔ∏è\n" \
             "3. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ ‚¨ÜÔ∏è\n" \
             "4. –ü—Ä–æ–π–¥–∏—Ç–µ –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–∞ –∫–∞—Ä—Ç–µ ‚úÖ"
    time = int(datetime.now().strftime("%H"))
    if (time > 8) and (time < 20):
        photo_id = BotDB.cursor.execute("SELECT photo_id FROM auds_light_bs_A WHERE name = ?", ("–ú–µ–¥–ø—É–Ω–∫—Ç1",)).fetchone()[0]
    else:
        photo_id = BotDB.cursor.execute("SELECT photo_id FROM auds_dark_bs_A WHERE name = ?", ("–ú–µ–¥–ø—É–Ω–∫—Ç1",)).fetchone()[0]
    await call.bot.send_photo(call.from_user.id, photo_id, travel)
    await call.message.delete()
    await state.finish()

@dp.callback_query_handler(text='input_sport', state=BsNavigation.bs_point_b_input)
async def input_med(call: types.CallbackQuery, state:FSMContext):
    travel = "1. –ü—Ä–æ–π–¥–∏—Ç–µ –Ω–∞–ª–µ–≤–æ –∫ –ª–µ—Å—Ç–Ω–∏—Ü–µ –∏ –ø–æ–¥–Ω–∏–º–∏—Ç–µ—Å—å –Ω–∞ 1 —ç—Ç–∞–∂ ‚§¥Ô∏è\n" \
             "2. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ª–µ–≤–æ ‚¨ÖÔ∏è\n" \
             "3. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ –¥–æ –ø—Ä–∞–≤–æ–≥–æ –∫–æ—Ä–∏–¥–æ—Ä–∞ ‚¨ÜÔ∏è\n" \
             "4. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–æ ‚û°Ô∏è\n" \
             "5. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ ‚¨ÜÔ∏è\n" \
             "6. –ü—Ä–æ–π–¥–∏—Ç–µ –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–∞ –∫–∞—Ä—Ç–µ ‚úÖ"
    time = int(datetime.now().strftime("%H"))
    if (time > 8) and (time < 20):
        photo_id = BotDB.cursor.execute("SELECT photo_id FROM auds_light_bs_A WHERE name = ?", ("–°–ø–æ—Ä—Ç–∑–∞–ª1",)).fetchone()[0]
    else:
        photo_id = BotDB.cursor.execute("SELECT photo_id FROM auds_dark_bs_A WHERE name = ?", ("–°–ø–æ—Ä—Ç–∑–∞–ª1",)).fetchone()[0]
    await call.bot.send_photo(call.from_user.id, photo_id, travel)
    await call.message.delete()
    await state.finish()

@dp.callback_query_handler(text='input_m_wc', state=BsNavigation.bs_point_b_input)
async def input_med(call: types.CallbackQuery, state:FSMContext):
    travel = "1. –ü—Ä–æ–π–¥–∏—Ç–µ –Ω–∞–ª–µ–≤–æ –∫ –ª–µ—Å—Ç–Ω–∏—Ü–µ –∏ –ø–æ–¥–Ω–∏–º–∏—Ç–µ—Å—å –Ω–∞ 1 —ç—Ç–∞–∂ ‚§¥Ô∏è\n" \
             "2. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–æ ‚û°Ô∏è\n" \
             "3. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ –¥–æ —É–ø–æ—Ä–∞ ‚¨ÜÔ∏è\n" \
             "4. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ª–µ–≤–æ ‚¨ÖÔ∏è\n" \
             "5. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ ‚¨ÜÔ∏è\n" \
             "6. –ü—Ä–æ–π–¥–∏—Ç–µ –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–∞ –∫–∞—Ä—Ç–µ ‚úÖ"
    time = int(datetime.now().strftime("%H"))
    if (time > 8) and (time < 20):
        photo_id = \
        BotDB.cursor.execute("SELECT photo_id FROM auds_light_bs_A WHERE name = ?", ("–ú–¢—É–∞–ª–µ—Ç1",)).fetchone()[0]
    else:
        photo_id = \
        BotDB.cursor.execute("SELECT photo_id FROM auds_dark_bs_A WHERE name = ?", ("–ú–¢—É–∞–ª–µ—Ç1",)).fetchone()[0]
    await call.bot.send_photo(call.from_user.id, photo_id, travel)
    await call.message.delete()
    await state.finish()

@dp.callback_query_handler(text='input_zh_wc', state=BsNavigation.bs_point_b_input)
async def input_med(call: types.CallbackQuery, state:FSMContext):
    travel = "1. –ü—Ä–æ–π–¥–∏—Ç–µ –Ω–∞–ª–µ–≤–æ –∫ –ª–µ—Å—Ç–Ω–∏—Ü–µ –∏ –ø–æ–¥–Ω–∏–º–∏—Ç–µ—Å—å –Ω–∞ 1 —ç—Ç–∞–∂ ‚§¥Ô∏è\n" \
             "2. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ª–µ–≤–æ ‚¨ÖÔ∏è\n" \
             "3. –ü—Ä–æ–π–¥–∏—Ç–µ –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–∞ –∫–∞—Ä—Ç–µ ‚úÖ"
    time = int(datetime.now().strftime("%H"))
    if (time > 8) and (time < 20):
        photo_id = \
        BotDB.cursor.execute("SELECT photo_id FROM auds_light_bs_A WHERE name = ?", ("–ñ–¢—É–∞–ª–µ—Ç1",)).fetchone()[0]
    else:
        photo_id = \
        BotDB.cursor.execute("SELECT photo_id FROM auds_dark_bs_A WHERE name = ?", ("–ñ–¢—É–∞–ª–µ—Ç1",)).fetchone()[0]
    await call.bot.send_photo(call.from_user.id, photo_id, travel)
    await call.message.delete()
    await state.finish()

@dp.message_handler(state=BsNavigation.bs_point_b_input)
async def bs_nav_input_next(mess: types.Message, state: FSMContext):
    if mess.text == "üîª –ú–∞—Ä—à—Ä—É—Ç (–ë–°)":
        await mess.bot.delete_message(mess.from_user.id, mess.message_id)
        buttons = [
            types.InlineKeyboardButton(text="–í—Ö–æ–¥", callback_data="bs_input"),
            # types.InlineKeyboardButton(text="–ê—É–¥–∏—Ç–æ—Ä–∏—è", callback_data="bs_audit"),
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)
        await mess.bot.send_message(mess.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞', reply_markup=keyboard)
    elif mess.text == "üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ë–°)":
        bs_info_text = 'üî∏<b>–ê–¥—Ä–µ—Å –∫–∞–º–ø—É—Å–∞ –Ω–∞ –ë–æ–ª—å—à–æ–π –°–µ–º—ë–Ω–æ–≤—Å–∫–æ–π:</b>\n' \
                       '—É—á–µ–±–Ω—ã–µ –∫–æ—Ä–ø—É—Å–∞ ¬´–ê¬ª, ¬´–ë¬ª, ¬´–í¬ª, ¬´–ù¬ª, ¬´–ù–î¬ª\n' \
                       '—Å—Ç. –º. ¬´–≠–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∞—è¬ª –∏–ª–∏ –∂/–¥ —Å—Ç–∞–Ω—Ü–∏—è –≠–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∞—è, —É–ª. –ë. –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è, –¥. 38.'
        await mess.bot.delete_message(mess.from_user.id, mess.message_id)
        await mess.bot.send_message(mess.from_user.id, bs_info_text)
    elif mess.text == "üè† –ì–ª–∞–≤–Ω–∞—è":
        await mess.bot.send_message(mess.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboards.start_keyboard)
    else:
        k = 3
        text = mess.text
        campus_letters = ["–ê", "–í", "–ë", "–ù"]
        text = text.replace("A", "–ê", 1)
        text = text.replace("B", "–í", 1)
        text = text.replace("H", "–ù", 1)
        travel = ""
        if (len(text) != 4) or (text[0] not in campus_letters) or (text[1] in campus_letters) or (
                text[2] in campus_letters) or (text[3] in campus_letters) or (text == "–ê107") or (int(text[1]) > 4) or (
                int(text[2]) > 2):
            await mess.bot.send_message(mess.from_user.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ ‚ùå")
        else:
            match text[0]:
                case "–ê":
                    try:
                        audit = text[1:]
                        travel += f"1. –ü—Ä–æ–π–¥–∏—Ç–µ –Ω–∞–ª–µ–≤–æ –∫ –ª–µ—Å—Ç–Ω–∏—Ü–µ –∏ –ø–æ–¥–Ω–∏–º–∏—Ç–µ—Å—å –Ω–∞ {audit[0]} —ç—Ç–∞–∂ ‚§¥Ô∏è\n"
                        if audit[0] == '1':
                            if (audit == '100'):
                                pass
                            elif (audit == '112') or (audit == '111'):
                                travel += '2. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ ‚¨ÜÔ∏è\n'
                            elif (int(audit[1:]) <= 20) and (int(audit[1:]) >= 13):
                                travel += f"2. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–æ ‚û°Ô∏è\n"
                            elif (int(audit[1:]) >= 1) and (int(audit[1:]) <= 10):
                                travel += f"2. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ª–µ–≤–æ ‚¨ÖÔ∏è\n"
                            else:
                                await mess.bot.send_message(mess.from_user.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ ‚ùå")
                                await state.finish()
                        elif audit[0] == '2':
                            if audit == '210':
                                travel += f"{k}. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ ‚¨ÜÔ∏è\n"
                                k += 1
                            else:
                                if (int(audit[1:]) <=9) and (int(audit[1:]) >= 1):
                                    travel += f"{k}. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ª–µ–≤–æ ‚¨ÖÔ∏è\n"
                                    k += 1
                                elif (int(audit[1:]) >= 11) and (int(audit[1:]) <= 21):
                                    travel += f"{k}. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–æ ‚û°Ô∏è\n"
                                    k += 1
                                else:
                                    await mess.bot.send_message(mess.from_user.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ ‚ùå")
                                    await state.finish()
                        elif audit[0] == '3':
                            if audit == '316':
                                travel += f"{k}. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ ‚¨ÜÔ∏è\n"
                                k += 1
                            else:
                                if (int(audit[1:]) < 16) and (int(audit[1:]) > 0):
                                    travel += f"{k}. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ª–µ–≤–æ ‚¨ÖÔ∏è\n"
                                    k += 1
                                elif (int(audit[1:]) > 16) and (int(audit[1:]) < 27):
                                    travel += f"{k}. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–æ ‚û°Ô∏è\n"
                                    k += 1
                                else:
                                    await mess.bot.send_message(mess.from_user.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ ‚ùå")
                                    await state.finish()
                        elif audit[0] == '4':
                            if audit == '415':
                                travel += f"{k}. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ ‚¨ÜÔ∏è\n"
                                k += 1
                            else:
                                if (int(audit[1:]) < 15) and (int(audit[1:]) > 0):
                                    travel += f"{k}. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ª–µ–≤–æ ‚¨ÖÔ∏è\n"
                                    k += 1
                                elif (int(audit[1:]) > 15) and (int(audit[1:]) < 26):
                                    travel += f"{k}. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–æ ‚û°Ô∏è\n"
                                    k += 1
                                else:
                                    await mess.bot.send_message(mess.from_user.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ ‚ùå")
                                    await state.finish()
                    except:
                        await mess.bot.send_message(mess.from_user.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ ‚ùå")
                        await state.finish()
            travel += f"{k}. –ü—Ä–æ–π–¥–∏—Ç–µ –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–∞ –∫–∞—Ä—Ç–µ ‚úÖ"
            time = int(datetime.now().strftime("%H"))
            if (time > 8) and (time < 20):
                if text == '–ê112':
                    photo_id_1 = BotDB.cursor.execute("SELECT `photo_id` FROM `auds_light_bs_A` WHERE `name` = ? ",
                                                      ("–ê112",)).fetchone()[0]
                    photo_id_2 = BotDB.cursor.execute("SELECT `photo_id` FROM `auds_light_bs_A` WHERE `name` = ? ",
                                                      ("–ê112–ë",)).fetchone()[0]
                    photo_id_3 = BotDB.cursor.execute("SELECT `photo_id` FROM `auds_light_bs_A` WHERE `name` = ? ",
                                                      ("–ê112–í",)).fetchone()[0]
                    photo_id_4 = BotDB.cursor.execute("SELECT `photo_id` FROM `auds_light_bs_A` WHERE `name` = ? ",
                                                      ("–ê112–ì",)).fetchone()[0]
                    media = types.MediaGroup()
                    media.attach_photo(photo=photo_id_1, caption=travel)
                    media.attach_photo(photo=photo_id_2)
                    media.attach_photo(photo=photo_id_3)
                    media.attach_photo(photo=photo_id_4)
                    await mess.bot.send_media_group(mess.from_user.id, media)
                else:
                    photo_id = \
                        BotDB.cursor.execute("SELECT `photo_id` FROM `auds_light_bs_A` WHERE `name` = ? ", (text,)).fetchone()[
                            0]
                    await mess.bot.send_photo(mess.from_user.id, photo_id, travel)
            else:
                if text == '–ê112':
                    photo_id_1 = BotDB.cursor.execute("SELECT `photo_id` FROM `auds_dark_bs_A` WHERE `name` = ? ",
                                                      ("–ê112",)).fetchone()[0]
                    photo_id_2 = BotDB.cursor.execute("SELECT `photo_id` FROM `auds_dark_bs_A` WHERE `name` = ? ",
                                                      ("–ê112–ë",)).fetchone()[0]
                    photo_id_3 = BotDB.cursor.execute("SELECT `photo_id` FROM `auds_dark_bs_A` WHERE `name` = ? ",
                                                      ("–ê112–í",)).fetchone()[0]
                    photo_id_4 = BotDB.cursor.execute("SELECT `photo_id` FROM `auds_dark_bs_A` WHERE `name` = ? ",
                                                      ("–ê112–ì",)).fetchone()[0]
                    media = types.MediaGroup()
                    media.attach_photo(photo=photo_id_1, caption=travel)
                    media.attach_photo(photo=photo_id_2)
                    media.attach_photo(photo=photo_id_3)
                    media.attach_photo(photo=photo_id_4)
                    await mess.bot.send_media_group(mess.from_user.id, media)
                else:
                    photo_id = \
                        BotDB.cursor.execute("SELECT `photo_id` FROM `auds_dark_bs_A` WHERE `name` = ? ", (text,)).fetchone()[0]
                    await mess.bot.send_photo(mess.from_user.id, photo_id, travel)
    await state.finish()


@dp.callback_query_handler(text='bs_audit', state=None)
async def bs_marsh_audit(call: types.CallbackQuery):
    await call.message.delete()
    await call.bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –í–∞–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏')
    await BsNavigation.bs_point_b_audit.set()


@dp.message_handler(state=BsNavigation.bs_point_b_audit)
async def bs_marsh_audit_next(state: FSMContext):
    await state.finish()
