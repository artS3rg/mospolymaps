from aiogram import types

import keyboards as k
from main import dp, BotDB
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

pr_info_text = 'üî∏<b>–ê–¥—Ä–µ—Å —É—á–µ–±–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞ –Ω–∞ —É–ª. –ü—Ä—è–Ω–∏—à–Ω–∏–∫–æ–≤–∞:</b>\n' \
               '127550, –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä—è–Ω–∏—à–Ω–∏–∫–æ–≤–∞, 2–ê\n' \
               '–ö–æ—Ä–ø—É—Å–∞ 1, 2'


class PrNavigation(StatesGroup):
    pr_point_a = State()


@dp.message_handler(lambda message: message.text == "–ü—Ä—è–Ω–∏—à–Ω–∏–∫–æ–≤–∞ (–ü–†)", state=None)
async def pr_selected(mess: types.Message):
    await mess.bot.send_message(mess.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=k.prCampus_keyboard)
    await mess.bot.delete_message(mess.from_user.id, mess.message_id)


@dp.message_handler(lambda message: message.text == "üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ü–†)", state=None)
async def pr_info(mess: types.Message):
    await mess.bot.delete_message(mess.from_user.id, mess.message_id)
    await mess.bot.send_message(mess.from_user.id, pr_info_text)


@dp.message_handler(lambda message: message.text == "üîª –ú–∞—Ä—à—Ä—É—Ç (–ü–†)", state=None)
async def pr_navigation(mess: types.Message):
    await mess.bot.delete_message(mess.from_user.id, mess.message_id)
    buttons = [
        types.InlineKeyboardButton(text="üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞", callback_data="input_library"),
        types.InlineKeyboardButton(text="ü•º –ì–∞—Ä–¥–µ—Ä–æ–±", callback_data="input_cloakroom"),
        types.InlineKeyboardButton(text="üëï –ú –¢—É–∞–ª–µ—Ç", callback_data="input_m_wc"),
        types.InlineKeyboardButton(text="üëö –ñ –¢—É–∞–ª–µ—Ç", callback_data="input_w_wc"),
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await mess.bot.send_message(mess.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –í–∞–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –Ω–∏–∂–µ ‚¨áÔ∏è',
                                reply_markup=keyboard)
    await PrNavigation.pr_point_a.set()


@dp.callback_query_handler(text='input_library', state=PrNavigation.pr_point_a)
async def input_library(call: types.CallbackQuery, state: FSMContext):
    photo_id = \
        BotDB.cursor.execute("SELECT photo_id FROM auds_pr_2 WHERE name = ?", ("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞",)).fetchone()[0]
    await call.bot.send_photo(call.from_user.id, photo_id)
    await call.message.delete()
    await state.finish()


@dp.callback_query_handler(text='input_m_wc', state=PrNavigation.pr_point_a)
async def input_m_wc(call: types.CallbackQuery, state: FSMContext):
    photo_id = \
        BotDB.cursor.execute("SELECT photo_id FROM auds_pr_2 WHERE name = ?", ("–ú_–¢—É–∞–ª–µ—Ç",)).fetchone()[0]
    await call.bot.send_photo(call.from_user.id, photo_id)
    await call.message.delete()
    await state.finish()


@dp.callback_query_handler(text='input_w_wc', state=PrNavigation.pr_point_a)
async def input_w_wc(call: types.CallbackQuery, state: FSMContext):
    photo_id = \
        BotDB.cursor.execute("SELECT photo_id FROM auds_pr_2 WHERE name = ?", ("–ñ_–¢—É–∞–ª–µ—Ç",)).fetchone()[0]
    await call.bot.send_photo(call.from_user.id, photo_id)
    await call.message.delete()
    await state.finish()


@dp.callback_query_handler(text='input_cloakroom', state=PrNavigation.pr_point_a)
async def input_cloakroom(call: types.CallbackQuery, state: FSMContext):
    photo_id = \
        BotDB.cursor.execute("SELECT photo_id FROM auds_pr_2 WHERE name = ?", ("–ì–∞—Ä–¥–µ—Ä–æ–±",)).fetchone()[0]
    await call.bot.send_photo(call.from_user.id, photo_id)
    await call.message.delete()
    await state.finish()


@dp.message_handler(state=PrNavigation.pr_point_a)
async def pr_travel(mess: types.Message, state: FSMContext):
    if mess.text == "üîª –ú–∞—Ä—à—Ä—É—Ç (–ü–†)":
        await mess.bot.delete_message(mess.from_user.id, mess.message_id)
        buttons = [
            types.InlineKeyboardButton(text="üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞", callback_data="input_library"),
            types.InlineKeyboardButton(text="ü•º –ì–∞—Ä–¥–µ—Ä–æ–±", callback_data="input_cloakroom"),
            types.InlineKeyboardButton(text="üëï –ú –¢—É–∞–ª–µ—Ç", callback_data="input_m_wc"),
            types.InlineKeyboardButton(text="üëö –ñ –¢—É–∞–ª–µ—Ç", callback_data="input_w_wc"),
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)
        await mess.bot.send_message(mess.from_user.id,
                                    '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –í–∞–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –Ω–∏–∂–µ ‚¨áÔ∏è')
        await PrNavigation.pr_point_a.set()
    elif mess.text == "üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ü–†)":
        await mess.bot.delete_message(mess.from_user.id, mess.message_id)
        await mess.bot.send_message(mess.from_user.id, pr_info_text)
    elif mess.text == "üè† –ì–ª–∞–≤–Ω–∞—è":
        await mess.bot.send_message(mess.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=k.start_stud_keyboard)
    else:
        photos = BotDB.cursor.execute("SELECT * FROM auds_pr_2 WHERE name = ?", (mess.text,)).fetchall()
        if len(photos) == 0:
            await mess.bot.send_message(mess.from_user.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ ‚ùå")
        elif len(photos) == 1:
            await mess.bot.send_photo(mess.from_user.id, photos[0][2])
        else:
            media = types.MediaGroup()
            for i in photos:
                media.attach_photo(photo=i[2])
            await mess.bot.send_media_group(mess.from_user.id, media)
    await state.finish()
